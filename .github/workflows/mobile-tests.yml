name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test'
        required: true
        default: 'both'
        type: choice
        options:
          - ios
          - android
          - both
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - regression
          - all

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  lint-and-setup:
    name: Code Quality & Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Check Code Formatting
        run: npm run format -- --check

      - name: Upload node_modules
        uses: actions/upload-artifact@v3
        with:
          name: node-modules
          path: node_modules/
          retention-days: 1

  ios-tests:
    name: iOS Tests
    needs: lint-and-setup
    runs-on: macos-latest
    if: github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both' || github.event.inputs.platform == ''
    strategy:
      matrix:
        device:
          - name: "iPhone 15 Pro"
            os_version: "17.2"
          - name: "iPhone 14"
            os_version: "16.4"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download node_modules
        uses: actions/download-artifact@v3
        with:
          name: node-modules

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install Appium & Drivers
        run: |
          npm install -g appium@latest
          appium driver install xcuitest

      - name: Create iOS Simulator
        run: |
          DEVICE_ID=$(xcrun simctl create "${{ matrix.device.name }}" \
            "$(xcrun simctl list devicetypes | grep -o "iPhone.*${{ matrix.device.name }}" | head -1)" \
            "$(xcrun simctl list runtimes | grep -o "iOS.*${{ matrix.device.os_version }}" | head -1)")
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          xcrun simctl boot $DEVICE_ID

      - name: Wait for Simulator
        run: |
          xcrun simctl bootstatus ${{ env.DEVICE_ID }}

      - name: Set Environment Variables
        run: |
          echo "IOS_DEVICE_NAME=${{ matrix.device.name }}" >> $GITHUB_ENV
          echo "IOS_PLATFORM_VERSION=${{ matrix.device.os_version }}" >> $GITHUB_ENV
          echo "TEST_ENV=ci" >> $GITHUB_ENV

      - name: Start Appium Server
        run: |
          appium server --log-timestamp --log-level info > appium.log 2>&1 &
          sleep 5

      - name: Run iOS Tests
        run: |
          if [ "${{ github.event.inputs.test_suite }}" = "regression" ]; then
            npm run ios:regression
          elif [ "${{ github.event.inputs.test_suite }}" = "all" ]; then
            npm run ios:regression
          else
            npm run ios:smoke
          fi

      - name: Upload Appium Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: appium-logs-ios-${{ matrix.device.name }}
          path: appium.log

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports-ios-${{ matrix.device.name }}
          path: reports/

      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots-ios-${{ matrix.device.name }}
          path: reports/screenshots/

  android-tests:
    name: Android Tests
    needs: lint-and-setup
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both' || github.event.inputs.platform == ''
    strategy:
      matrix:
        api-level: [34, 33]
        target: [google_apis]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Download node_modules
        uses: actions/download-artifact@v3
        with:
          name: node-modules

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Appium & Drivers
        run: |
          npm install -g appium@latest
          appium driver install uiautomator2

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD Cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}

      - name: Create AVD and Start Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: Pixel 7
          avd-name: test-emulator
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: echo "Emulator started"

      - name: Set Environment Variables
        run: |
          echo "ANDROID_DEVICE_NAME=test-emulator" >> $GITHUB_ENV
          echo "ANDROID_PLATFORM_VERSION=${{ matrix.api-level }}" >> $GITHUB_ENV
          echo "TEST_ENV=ci" >> $GITHUB_ENV

      - name: Start Appium Server
        run: |
          appium server --log-timestamp --log-level info > appium.log 2>&1 &
          sleep 5

      - name: Wait for Emulator
        run: |
          adb wait-for-device
          adb shell input keyevent 82

      - name: Run Android Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: Pixel 7
          avd-name: test-emulator
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: |
            if [ "${{ github.event.inputs.test_suite }}" = "regression" ]; then
              npm run android:regression
            elif [ "${{ github.event.inputs.test_suite }}" = "all" ]; then
              npm run android:regression
            else
              npm run android:smoke
            fi

      - name: Upload Appium Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: appium-logs-android-api${{ matrix.api-level }}
          path: appium.log

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports-android-api${{ matrix.api-level }}
          path: reports/

      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots-android-api${{ matrix.api-level }}
          path: reports/screenshots/

  generate-report:
    name: Generate Combined Report
    needs: [ios-tests, android-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download All Reports
        uses: actions/download-artifact@v3
        with:
          path: all-reports/

      - name: Merge Reports
        run: |
          mkdir -p final-reports
          find all-reports -name "*.json" -exec cp {} final-reports/ \;
          npm install -g allure-commandline
          allure generate final-reports --clean -o allure-report

      - name: Upload Final Report
        uses: actions/upload-artifact@v3
        with:
          name: combined-test-report
          path: allure-report/

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'allure-report/widgets/summary.json';
            
            if (fs.existsSync(reportPath)) {
              const summary = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const total = summary.statistic.total;
              const passed = summary.statistic.passed;
              const failed = summary.statistic.failed;
              const skipped = summary.statistic.skipped;
              const passRate = ((passed / total) * 100).toFixed(2);
              
              const comment = `## 📊 Test Results
              
              - **Total Tests:** ${total}
              - **Passed:** ✅ ${passed}
              - **Failed:** ❌ ${failed}
              - **Skipped:** ⏭️ ${skipped}
              - **Pass Rate:** ${passRate}%
              
              [View Full Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  notify:
    name: Send Notifications
    needs: generate-report
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Determine Status
        id: status
        run: |
          if [ "${{ needs.generate-report.result }}" = "success" ]; then
            echo "status=✅ Passed" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=❌ Failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack Notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "Mobile Test Results",
              "attachments": [{
                "color": "${{ steps.status.outputs.color }}",
                "title": "Test Run ${{ steps.status.outputs.status }}",
                "fields": [
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                  {"title": "Triggered By", "value": "${{ github.actor }}", "short": true},
                  {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
                  {"title": "Run Number", "value": "#${{ github.run_number }}", "short": true}
                ],
                "footer": "GitHub Actions",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": '${{ github.event.head_commit.timestamp }}'
              }]
            }'